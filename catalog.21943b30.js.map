{"mappings":"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","sources":["src/js/catalog.js"],"sourcesContent":["\n// import axios from 'axios';\n//   import { KEY } from \"./api-key\";\n\n\n//   const BASE_URL = 'https://api.themoviedb.org/3/';\n//   const searchInput = document.getElementById('searchInput');\n//   const movieList = document.querySelector('#movie-list');\n//   const pagination = document.querySelector('.pagination')\n\n\n// <<<<<<< Updated upstream\n//     if (movies.length === 0) {\n//       movieList.innerHTML = '<p>OOPS...We are very sorry!We don’t have any results due to your search.</p>';\n//       pagination.innerHTML = '';\n//     } else {\n//       const start = (currentPage - 1) * moviesPerPage; // Индекс первого отображаемого фильма\n//       const end = start + moviesPerPage; // Индекс последнего отображаемого фильма\n//       const displayedMovies = movies.slice(start, end); // Отображаемые фильмы\n\n//       movieList.innerHTML = '';\n//       const promises = displayedMovies.map(async (movie) => {\n//         try {\n//           const { data: movieDetails } = await axios.get(\n//             `${BASE_URL}movie/${movie.id}?api_key=${KEY}`\n//           );\n//           const movieHtml = movieTemplate({ ...movie, ...movieDetails });\n//           movieList.insertAdjacentHTML('beforeend', movieHtml);\n//         } catch (error) {\n//           console.error(error);\n//         }\n//       });\n//       await Promise.all(promises);\n\n//       const paginationHtml = generatePagination(totalPages, currentPage);\n//       pagination.innerHTML = paginationHtml;\n\n//       pagination.addEventListener('click', function(event) {\n//         if (event.target.tagName === 'A') {\n//           const pageNumber = event.target.dataset.page;\n//           searchMovies(event, pageNumber);\n//         }\n//       });\n\n//       searchInput.value = '';\n//     }\n//   } catch (error) {\n//     console.error(error);\n//   }\n// }\n\n//   const searchForm = document.querySelector('.catalog__search form');\n\n//   searchForm.addEventListener('submit', searchMovies);\n\n//   function movieTemplate(movie) {\n//   return `<li>\n//             <img src=\"https://image.tmdb.org/t/p/w500${movie.poster_path}\">\n//             <h3>${movie.title}</h3>\n//             <p>${movie.overview}</p>\n//             <span>${movie.vote_average}</span>\n//             <span>${movie.genres.slice(0, 2).map(genre => genre.name).join(', ')}</span>\n//           </li>`;\n// }\n\n//   fetchTrendingMovies();\n\n// function generatePagination(totalPages, currentPage) {\n//   if (totalPages <= 1) {\n//     return '';\n//   }\n//   let paginationHtml = '<div class=\"pagination\">';\n//   for (let i = 1; i <= totalPages; i++) {\n//     if (i === currentPage) {\n//       paginationHtml += `<span>${i}</span>`;\n//     } else {\n//       paginationHtml += `<a href=\"#\" data-page=\"${i}\">${i}</a>`;\n//     }\n//   }\n//   paginationHtml += '</div>';\n//   return paginationHtml;\n// }\n\nimport { KEY } from './api-key';\nimport { renderModal } from './modal_film';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst API_URL_TRENDING = `${BASE_URL}/trending/movie/day?api_key=${KEY}`;\nconst API_URL_SEARCH = `${BASE_URL}/search/movie?api_key=${KEY}&query=`;\n\nlet currentPage = 1;\nconst moviesPerPage = 10;\nlet totalMovies = 0;\n\n\n\ngetMovies(API_URL_TRENDING);\n\nasync function getMovies(url) {\n  const resp = await fetch(url);\n  const respData = await resp.json();\n  totalMovies = respData.total_results;\n  showMovies(respData.results);\n  displayPagination();\n  currentPage = 1; // Reset currentPage to 1 after fetching new movies\n}\n\nfunction getClassByRate(vote) {\n  if (vote >= 7) {\n    return 'green';\n  } else if (vote > 5) {\n    return 'orange';\n  } else {\n    return 'red';\n  }\n}\n\nfunction showMovies(data) {\n  const moviesEl = document.querySelector('.movies');\n\n  // Clear previous movies\n  moviesEl.innerHTML = '';\n\n  data.forEach(movie => {\n    const movieEl = document.createElement('div');\n    movieEl.classList.add('movie');\n    movieEl.innerHTML = `\n      <div class=\"movie__cover-inner \">\n        <img\n          src=\"https://image.tmdb.org/t/p/w500${movie.poster_path}\"\n          class=\"movie__cover\"\n          alt=\"${movie.title}\"\n        />\n        <div class=\"movie__cover--darkened\"></div>\n      </div>\n      <div class=\"movie__info\">\n        <div class='movie__info_wrapper'>\n        <div class=\"movie__title\">${movie.title}</div>\n        <div class=\"movie__category\">${movie.genre_ids}</div>\n      <div/>\n        <div class=\"movie__average movie__average--${getClassByRate(movie.vote_average)}\">${movie.vote_average}</div>\n      </div>\n    `;\n    moviesEl.appendChild(movieEl);\n  });\n}\n\nfunction displayPagination() {\n  const paginationEl = document.querySelector('.pagination');\n  const pagesCount = Math.ceil(totalMovies / moviesPerPage);\n  const ulEl = document.createElement('ul');\n  ulEl.classList.add('pagination__list');\n\n  // Determine the maximum number of buttons to display\n  const maxButtons = 4;\n  const startPage = Math.max(1, currentPage - Math.floor(maxButtons / 2));\n  const endPage = Math.min(startPage + maxButtons - 1, pagesCount);\n\n  for (let i = startPage; i <= endPage; i++) {\n    const liEl = document.createElement('li');\n    liEl.classList.add('pagination__item');\n    liEl.innerText = i;\n    if (i === currentPage) {\n      liEl.classList.add('pagination__item--active');\n    }\n  }\n  async function fetchTrendingMovies() {\n  try {\n    const response = await axios.get(`${BASE_URL}trending/movie/week?api_key=${KEY}`);\n    const movies = response.data.results;\n    for (const movie of movies) {\n      try {\n        const { data: movieDetails } = await axios.get(\n          `${BASE_URL}movie/${movie.id}?api_key=${KEY}`\n        );\n        const movieHtml = movieTemplate({ ...movie, ...movieDetails });\n        movieList.insertAdjacentHTML('beforeend', movieHtml);\n      } catch (error) {\n        console.error(error);\n      }\n\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\nasync function searchMovies(event, currentPage = 1) {\n  event.preventDefault();\n  const searchTerm = searchInput.value;\n  const moviesPerPage = 10; // Количество фильмов на странице\n\n  try {\n    const response = await axios.get(`${BASE_URL}search/movie?api_key=${KEY}&query=${searchTerm}&page=${currentPage}`);\n    const { results: movies, total_pages: totalPages } = response.data;\n\n    if (movies.length === 0) {\n      movieList.innerHTML = '<p>OOPS...We are very sorry!We don’t have any results due to your search.</p>';\n      pagination.innerHTML = '';\n    } else {\n      const start = (currentPage - 1) * moviesPerPage; // Индекс первого отображаемого фильма\n      const end = start + moviesPerPage; // Индекс последнего отображаемого фильма\n      const displayedMovies = movies.slice(start, end); // Отображаемые фильмы\n\n      movieList.innerHTML = '';\n      const promises = displayedMovies.map(async (movie) => {\n        try {\n          const { data: movieDetails } = await axios.get(\n            `${BASE_URL}movie/${movie.id}?api_key=${KEY}`\n          );\n          const movieHtml = movieTemplate({ ...movie, ...movieDetails });\n          movieList.insertAdjacentHTML('beforeend', movieHtml);\n        } catch (error) {\n          console.error(error);\n        }\n      });\n      await Promise.all(promises);\n\n      const paginationHtml = generatePagination(totalPages, currentPage);\n      pagination.innerHTML = paginationHtml;\n\n      pagination.addEventListener('click', function(event) {\n        if (event.target.tagName === 'A') {\n          const pageNumber = event.target.dataset.page;\n          searchMovies(event, pageNumber);\n        }\n      });\n\n      searchInput.value = '';\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\n\n  const searchForm = document.querySelector('.catalog__search form');\n  \n  searchForm.addEventListener('submit', searchMovies);\n\n  function movieTemplate(movie) {\n  return `<li>\n            <img src=\"https://image.tmdb.org/t/p/w500${movie.poster_path}\">\n            <h3>${movie.title}</h3>\n            <p>${movie.overview}</p>\n            <span>${movie.vote_average}</span>\n            <span>${movie.genres.slice(0, 2).map(genre => genre.name).join(', ')}</span>\n          </li>`;\n}\n\n  fetchTrendingMovies();\n\nfunction generatePagination(totalPages, currentPage) {\n  if (totalPages <= 1) {\n    return '';\n  }\n  let paginationHtml = '<div class=\"pagination\">';\n  for (let i = 1; i <= totalPages; i++) {\n    if (i === currentPage) {\n      paginationHtml += `<span>${i}</span>`;\n    } else {\n      paginationHtml += `<a href=\"#\" data-page=\"${i}\">${i}</a>`;\n    }\n  }\n  paginationHtml += '</div>';\n  return paginationHtml;\n}\n\nconst form = document.querySelector('form');\nconst search = document.querySelector('.catalog__search');\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n\n  const searchKeyword = search.value;\n  if (searchKeyword) {\n    const apiSearchUrl = `${API_URL_SEARCH}${searchKeyword}&api_key=${KEY}`;\n    getMovies(apiSearchUrl);\n\n    search.value = '';\n  }\n});\n}\n\nrenderModal();\n"],"names":["$fPgXx","parcelRequire","$9f350005b1f9b186$var$BASE_URL","$9f350005b1f9b186$var$API_URL_TRENDING","KEY","$9f350005b1f9b186$var$API_URL_SEARCH","$9f350005b1f9b186$var$currentPage","$9f350005b1f9b186$var$moviesPerPage","$9f350005b1f9b186$var$totalMovies","async","$9f350005b1f9b186$var$getMovies","url","resp","fetch","respData","json","total_results","data","moviesEl","document","querySelector","innerHTML","forEach","movie","movieEl","createElement","vote","classList","add","poster_path","title","genre_ids","vote_average","appendChild","$9f350005b1f9b186$var$showMovies","results","pagesCount","Math","ceil","maxButtons","startPage","max","floor","endPage","min","i","liEl","innerText","fetchTrendingMovies","movies","axios","get","movieDetails","id","movieHtml","movieTemplate","movieList","insertAdjacentHTML","error","console","searchMovies","event","currentPage","preventDefault","searchTerm","searchInput","value","moviesPerPage","response","total_pages","totalPages","length","pagination","start","end","displayedMovies","slice","promises","map","Promise","all","paginationHtml","generatePagination","addEventListener","target","tagName","dataset","page","overview","genres","genre","name","join","form","search","e","searchKeyword","$9f350005b1f9b186$var$displayPagination","$KVL8z","renderModal"],"version":3,"file":"catalog.21943b30.js.map"}